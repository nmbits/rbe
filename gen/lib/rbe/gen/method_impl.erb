% c, fn = args

		VALUE
		<%= class_binding_name c.name %>::rbe_<%= underscore fn.name %>(int argc, VALUE *argv, VALUE self)
		{
			RBE_TRACE_METHOD_CALL("<%= c.name %>::rbe_<%= underscore fn.name %>", argc, argv, self);
			VALUE vret = Qnil;
% unless fn.static?
			<%= c.name %> *_this = Convert<<%= c.name %> *>::FromValue(self);
% end
% if fn.assert_locked?
			if (find_thread(NULL) != _this->LockingThread())
				rb_raise(rb_eThreadError, "the looper isn't locked by this thread");
% end
% if fn.check_locked?
			if (_this->Looper() && _this->Looper()->LockingThread() != find_thread(NULL))
				rb_raise(rb_eThreadError, "the looper isn't locked by this thread");
% end
% if fn.check_owner_locked?
			if (!_this->Looper() || _this->Looper()->LockingThread() != find_thread(NULL))
				rb_raise(rb_eThreadError, "the looper isn't locked by this thread");
% end
% if fn.prelock?
%   need_unlock = true
			bool unlock = false;
			if (find_thread(NULL) != _this->LockingThread()) {
				status_t status =
					Util::LockLooperWithTimeout(_this, B_INFINITE_TIMEOUT);
				if (status != B_OK)
					return Qnil;
				unlock = true;
			}
% else
%   need_unlock = false
% end
% if fn.method_arity_max > 0
			int type_error_index = 0;
% end
% if fn.static?
%   dereference = ""
% else
%   dereference = "_this->"
% end
% fn.interfaces.each_with_index do |f, i|
%   next if f.ignore?
%   if f.method_arity == f.method_arity_min
			if (<%= f.method_arity %> == argc) {
%   else
			if (<%= f.method_arity_min %> <= argc && argc <= <%= f.method_arity %>) {
%   end
%   use_break = false
%   f.each_method_arg_with_type do |a, type, j|
%     next if a.out?
%     unless a.nillable?
				if (<%= j %> < argc && argv[<%= j %>] == Qnil) {
					type_error_index = <%= j %>;
					goto break_<%= i %>;
				}
%     end
%     use_break = true
%     if a.nillable?
				if (<%= j %> < argc && !Convert<<%= type %> >::IsConvertable(argv[<%= j %>]) && !NIL_P(argv[<%= j %>])) {
%     else
				if (<%= j %> < argc && !Convert<<%= type %> >::IsConvertable(argv[<%= j %>])) {
%     end
					type_error_index = <%= j %>;
					goto break_<%= i %>;
				}
%   end
%   f.each_method_arg_with_type do |a, type, j, b|
%     if a.out?
				<%= a.type.dereferenced %> _tmp_<%= a.name %>;
				<%= a.type %> <%= a.name %> = &_tmp_<%= a.name %>;
%     elsif a.optional?
				<%= a.type %> <%= a.name %> = (<%= j %> < argc ? Convert<<%= a.type %> >::FromValue(argv[<%= j %>]) : (<%= a.type %>)<%= a.value %>);
%     elsif a.pair?
				<%= type %> pair_<%= a.name %>_<%= b.name %> = Convert<<%= type %> >::FromValue(argv[<%= j %>]);
				<%= a.type %> <%= a.name %> = pair_<%= a.name %>_<%= b.name %>.first;
				<%= b.type %> <%= b.name %> = pair_<%= a.name %>_<%= b.name %>.second;
%     else
				<%= a.type %> <%= a.name %> = Convert<<%= type %> >::FromValue(argv[<%= j %>]);
%     end
%   end

%   if f.pure?
%     class_spec = ""
%   else
%     class_spec = "#{c.name}::"
%   end
%   if f.ret?
				<%= f.ret %> ret;
				std::function<void ()> f = [&]() {
					ret = <%= dereference %><%= class_spec %><%= fn.name %>(<%= input_args_no_paren f %>);
				};
				CallWithoutGVL<std::function<void ()>, void> g(f);
				g();
%   else
				std::function<void ()> f = [&]() {
					<%= dereference %><%= class_spec %><%= fn.name %>(<%= input_args_no_paren f %>);
				};
				CallWithoutGVL<std::function<void ()>, void> g(f);
				g();
%   end
%   f.each_method_arg_with_type do |a, type, j|
%     if a.up?
				if (!NIL_P(argv[<%= j %>]))
					gc::Up(self, argv[<%= j %>]);
%     elsif a.down?
				if (!NIL_P(argv[<%= j %>]))
					gc::Down(self, argv[<%= j %>]);
%     end
%   end
%   if need_unlock
				if (unlock)
					_this->Unlock();
%   end
				rb_thread_check_ints();
				if (ThreadException() > 0) {
					rb_jump_tag(ThreadException());
				}
%   if f.ret?
				vret = Convert<<%= f.ret %>>::ToValue(ret);
%   end
%   if f.args.find {|a| a.out? }
				VALUE tmp_array = rb_ary_new();
%     if f.ret?
				rb_ary_push(tmp_array, vret);
%     end
%     f.args.find_all{|a| a.out? }.each do |a|
				rb_ary_push(tmp_array, Convert<<%= a.type.dereferenced %>>::ToValue(_tmp_<%= a.name %>));
%     end
				vret = tmp_array;
%   end
				return vret;
			}
%   if use_break
		break_<%= i %>:
%   end

% end
% if need_unlock
			if (unlock)
			    _this->Unlock();
% end
% if fn.method_arity_max == 0
			rb_raise(rb_eArgError, "wrong number of arguments (%d for 0)", argc);
% elsif fn.method_arity_max == fn.method_arity_min
			if (argc != <%= fn.method_arity_max %>)
				rb_raise(rb_eArgError, "wrong number of arguments (%d for <%= fn.method_arity_min %>)", argc);
			else
				rb_raise(rb_eArgError, "wrong type of argument at %d", type_error_index);
% else
			if (argc < <%= fn.method_arity_min %> || argc > <%= fn.method_arity_max %>)
				rb_raise(rb_eArgError, "wrong number of arguments (%d for (<%= (fn.method_arity_min..fn.method_arity_max).to_s %>))", argc);
			else
				rb_raise(rb_eArgError, "wrong type of argument at %d", type_error_index);
% end
			return Qnil;
		}
