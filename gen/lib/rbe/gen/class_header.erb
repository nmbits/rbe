% c = target

#ifndef <%= header_file_identifier(c.name) %>
#define <%= header_file_identifier(c.name) %> 1

#define private public
#define protected public

#include <<%= c.header_file %>>

#undef private
#undef protected

#include <ruby.h>
#include "type_map.hpp"

% if c.super_class_name
#include "<%= class_binding_header c.super_class_name %>"

% end
namespace rbe {
	namespace B {
		class <%= class_binding_name(c.name) %>;
	}

	template<>
	struct WrapperOf<<%= c.name %>>
	{
		typedef B::<%= class_binding_name(c.name) %> Class;
	};

	template<>
	struct PointerOf<<%= c.name %>>
	{
		typedef <%= c.root_class.name %> Class;
	};

	namespace B {
		class <%= class_binding_name(c.name) %> : public <%= c.name %>
		{
		private:
			static VALUE sClass;
			static const rb_data_type_t sDataType;
			//
			// Constructor
			//
% if c.wrapper?
		public:
% else
		private:
% end
% c.ctor.interfaces.each do |f|
			<%= class_binding_name(c.name) %>(<%= args_proto_string(f.args) %>)
				: <%= c.name %>(<%= args_string(f.args) %>)
			{}
% end
			virtual ~<%= class_binding_name(c.name) %>() {}

		public:
			//
			// Hooks
			//
% c.hooks.each do |f|
%   next if f.ignore?
			<%= f.interfaces.first.proto %>;
% end

% c.hooks.each do |f|
%   next if f.ignore?
			<%= hookst_proto(f.interfaces.first) %>;
% end
			//
			// Hooks from super classes
			//
% c.super_hooks.each do |f|
%   next if f.ignore?
			<%= f.interfaces.first.proto %>;
% end

			static VALUE Class() { return sClass; }
			static const rb_data_type_t *DataType() { return &sDataType; }
% unless c.wrapper?
			static VALUE Wrap(<%= c.name %> *obj);
% end
		public:
			//
			// Member functions for Ruby
			//
% c.find_functions.each do |f|
%   next if f.ignore?
%   next if f.ctor?
			static VALUE rbe_<%= underscore f.name %>(int, VALUE *, VALUE);
% end
% c.variables.each do |v|
			static VALUE rbe_iv_<%= underscore v.name %>_get(VALUE);
			static VALUE rbe_iv_<%= underscore v.name %>_set(VALUE, VALUE);
% end
			//
			// Ruby interfaces
			//

			static VALUE rbe__initialize(int, VALUE *, VALUE);
			static VALUE rbe__alloc(VALUE);
			static void rbe__gc_mark(void *);
			static void rbe__gc_free(void *);
			static size_t rbe__gc_size(const void *);

		public:
			// init
			static VALUE rbe__init_class(VALUE);
		};
	} // namespace B
} // namespace rbe

#endif
