% c = target
		// Ruby C API interfaces
% if c.ctor.unsupported?
		[[ noreturn ]]
% end
		VALUE <%= class_binding_name c.name %>::rbe__alloc(VALUE clazz)
		{
% if c.ctor.unsupported?
			rb_raise(rb_eNotImpError, "To instatiate B::<%= class_binding_name c.name %> is prohivited.");
			// return Qnil;
% else
			return TypedData_Wrap_Struct(clazz, &sDataType, 0);
% end
		}

% if c.custom_mark?
		/****** (custom)
% end
		void <%= class_binding_name c.name %>::rbe__gc_mark(void *ptr)
		{
		    RBE_PRINT(("<%= class_binding_name c.name %>::rb__gc_mark: %p\n", ptr));
% if c.super_class_name
			// call super
			<%= class_binding_name c.super_class_name %>::rbe__gc_mark(ptr);
% end
		}
% if c.custom_mark?
		******/
% end

% if c.custom_free?
		/****** (custom)
% end
		void <%= class_binding_name c.name %>::rbe__gc_free(void *ptr)
		{
		    RBE_PRINT(("<%= c.name %>::rb__gc_free: %p\n", ptr));
		    PRINT(("ptr = %p\n", ptr));
% if c.super_class_name == nil
			// delete this
			gc::Forget(ptr);
			PointerOf<<%= c.name %>>::Class *obj =
				static_cast<PointerOf<<%= c.name %>>::Class *>(ptr);
			delete obj;
% else
			// call super
			<%= class_binding_name c.super_class_name %>::rbe__gc_free(ptr);
% end
		}
% if c.custom_free?
		******/
% end

		size_t <%= class_binding_name c.name %>::rbe__gc_size(const void *)
		{
			return sizeof(<%= class_binding_name c.name %>);
		}
