% c = target

VALUE
<%= c.name %>::rb_initialize(int argc, VALUE *argv, VALUE self)
{
% arity_max = c.ctors.map{|f| f.arity}.max
% arity_min = c.ctors.map{|f| f.arity_min }.min
% optional = arity_max - arity_min
% if arity_max == 0
	<%= c.wrapper? ? c.name : c.api_name %> *_this = new <%= c.name %>();
	DATA_PTR(self) = (void *)(dynamic_cast<typename PointerOf<<%= c.api_name %>>::Class *>(_this));
	return self;
% else
	VALUE vargs[<%= arity_max %>];
%   vargs = arity_max.times.map{|i| "varg#{i}"}.join(', ')
	rb_scan_args(argc, argv, "<%= arity_min %><%= optional %>", <%= arity_max.times.map{|i| "&vargs[#{i}]" }.join(", ") %>);
	<%= c.wrapper? ? c.name : c.api_name %> *_this = NULL;
%   c.ctors.each do |f, i|
%     if f.arity_min == f.arity
	if (<%= f.arity %> == argc) {
%     else
	if (<%= f.arity_min %> <= argc && argc <= <%= f.arity %>) {
%     end
%     f.args.each_with_index do |a, i|
		if (<%= i %> < argc && !Convert<<%= a.type %>>::IsConvertable(vargs[<%= i %>])) goto break_<%= f.index %>;
%     end
%     f.args.each_with_index do |a, i|
%       if i < f.arity_min
		<%= a.type %> arg<%= i %> = Convert<<%= a.type %>>::FromValue(vargs[<%= i %>]);
%       else
		<%= a.type %> arg<%= i %> = (<%= i %> < argc ? Convert<<%= a.type %>>::FromValue(vargs[<%= i %>]) : <%= a.value %>);
%       end
%     end
		_this = new <%= c.wrapper? ? c.name : c.api_name %>(<%= f.args.size.times.map{|i| "arg#{i}"}.join(", ") %>);
		goto fin;
	}
 break_<%= f.index %>:
%   end
 fin:
	if (_this == NULL) {
		rb_raise(rb_eTypeError, "wrong type of argument");
	}
% end
	PointerOf<<%= c.api_name %>>::Class *ptr = static_cast<PointerOf<<%= c.api_name %>>::Class *>(_this);
	DATA_PTR(self) = static_cast<void *>(ptr);
	ObjectRegistory::Instance()->Register(self);
	return self;
}
